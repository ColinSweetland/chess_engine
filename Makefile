CXX		:= clang++

# Warnings are good
CXXFLAGS	:= -Wall -Wextra -Werror -Wpedantic

# I probably shouldn't use the non-standard feature, but it's awesome
CXXFLAGS	+= -Wno-gnu-case-range

# C++ std
CXXFLAGS	+= -std=c++17

# use bmi instruction set (currently required but should not be)
CXXFLAGS	+= -mbmi2

# generate .d files which help make
CXXFLAGS	+= -MMD -MP

# start with empty postfix
EXE_POSTFIX :=

ifdef RELEASE 
# most optimization
CXXFLAGS	+= -O3
# link time optimization
CXXFLAGS	+= -flto
# native architechture
CXXFLAGS	+= -march=native
# disable assertions
CXXFLAGS 	+= -DNDEBUG

# add postfix to output
EXE_POSTFIX += _release

else # not optimized ('debug mode') 
# some optimization
CXXFLAGS	+= -O1
# most debug symbols
CXXFLAGS 	+= -g3
# sanitizers
CXXFLAGS	+= -fsanitize=undefined,address

EXE_POSTFIX += _debug
endif

SRC_DIR	:= src
OBJ_DIR	:= obj

# VPATH is where make can search for pattern prereqs (%.cpp) (command outputs src/ and all subdirs)
VPATH 	:= $(shell find $(SRC_DIR)/ -type d -exec printf " %s" {} \;)

# every .cpp under src/
SOURCES := $(shell find -iname "*.cpp" -path "./$(SRC_DIR)/*" -printf "%P\n")

# note: with this scheme, sources in different subdirs of src/ still can't have the same name (TODO: fix if needed)
OBJECTS := $(patsubst %.cpp,$(OBJ_DIR)/%$(EXE_POSTFIX).o,$(notdir $(SOURCES)))

OUT_DIR	 := output
EXE_NAME := chessengine
OUT_EXE	 := $(OUT_DIR)/$(EXE_NAME)$(EXE_POSTFIX)

# include .deps generated by compiler: they help makefile to determine dependencies
DEPS = $(OBJECTS:.o=.d)
-include $(DEPS)

# Compile the program
all: $(OUT_EXE)

# Run the program
run: $(OUT_EXE)
	echo "============= running program ============="; echo 
	./$(OUT_EXE); \
	echo "============= Exit code: $$? ================"

# make these directories, if they don't exist
$(OBJ_DIR) $(OUT_DIR):
	mkdir -p $@

# link objects and output runnable program in output/
$(OUT_EXE): $(OBJECTS) | $(OUT_DIR)
	$(CXX) $(CXXFLAGS) $^ -o $@

# we can build obj/%_postfix.o using %.cpp anywhere in VPATH, after making OBJ_DIR
$(OBJ_DIR)/%$(EXE_POSTFIX).o: %.cpp | $(OBJ_DIR)
	$(CXX) $(CXXFLAGS) -c $< -o $@

# Remove generated files
clean:
	rm -rf $(OBJ_DIR) $(OUT_DIR)

# run all tests
runtests: all
	echo
	./tests/run_tests.sh '$(shell readlink -f $(OUT_EXE))'

# don't create the file of their target
.PHONY: clean all run runtests

# won't print commands
.SILENT: run runtests

